name: Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'src/requirements.txt'
      - 'config/pytest.ini'
      - 'tests/**'
      - '.github/workflows/backend-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'src/requirements.txt'
      - 'config/pytest.ini'
      - 'tests/**'
      - '.github/workflows/backend-tests.yml'

env:
  PYTHON_VERSION: '3.10'
  POSTGRES_VERSION: '15'
  NODE_VERSION: '20'

jobs:
  backend-tests:
    name: Backend Testing
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: scheduler
          POSTGRES_PASSWORD: scheduler
          POSTGRES_DB: scheduler_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 30s
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt
          pip install pytest-cov pytest-mock coverage[toml]

      - name: Wait for PostgreSQL
        run: |
          timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U scheduler; do sleep 1; done'
          psql -h localhost -p 5432 -U scheduler -d postgres -c "CREATE DATABASE scheduler_test;"

      - name: Run database migrations
        env:
          DATABASE_USERNAME: scheduler
          DATABASE_PASSWORD: scheduler
          DATABASE_HOST: localhost
          DATABASE_NAME: scheduler_test
          DATABASE_PORT: 5432
        run: |
          alembic upgrade head

      - name: Run unit tests
        env:
          DATABASE_USERNAME: scheduler
          DATABASE_PASSWORD: scheduler
          DATABASE_HOST: localhost
          DATABASE_NAME: scheduler_test
          DATABASE_PORT: 5432
        run: |
          pytest tests/unit/ -v \
            --cov=backend \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junitxml=test-results/unit-tests.xml

      - name: Run integration tests
        env:
          DATABASE_USERNAME: scheduler
          DATABASE_PASSWORD: scheduler
          DATABASE_HOST: localhost
          DATABASE_NAME: scheduler_test
          DATABASE_PORT: 5432
        run: |
          pytest tests/integration/ -v \
            --cov=backend \
            --cov-append \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junitxml=test-results/integration-tests.xml

      - name: Run security tests with Bandit
        run: |
          bandit -r backend/ -f json -o test-results/bandit-report.json || true
          bandit -r backend/ -f txt -o test-results/bandit-report.txt || true

      - name: Run safety check for dependencies
        run: |
          safety check --json --output test-results/safety-report.json || true
          safety check --output test-results/safety-report.txt || true

      - name: Upload test results to GitHub
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            test-results/
            htmlcov/
            coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Backend Test Results
          path: test-results/*.xml
          reporter: java-junit

      - name: Security Scan Summary
        if: always()
        run: |
          echo "## Bandit Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat test-results/bandit-report.txt | head -50 || echo "No security issues found" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Matrix testing for different Python versions
  backend-tests-matrix:
    name: Backend Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: backend-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: scheduler
          POSTGRES_PASSWORD: scheduler
          POSTGRES_DB: scheduler_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt
          pip install pytest-cov

      - name: Wait for PostgreSQL
        run: |
          timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U scheduler; do sleep 1; done'
          psql -h localhost -p 5432 -U scheduler -d postgres -c "CREATE DATABASE scheduler_test;"

      - name: Run tests
        env:
          DATABASE_USERNAME: scheduler
          DATABASE_PASSWORD: scheduler
          DATABASE_HOST: localhost
          DATABASE_NAME: scheduler_test
          DATABASE_PORT: 5432
        run: |
          pytest tests/ -v --tb=short --junitxml=test-results/python-${{ matrix.python-version }}-tests.xml

      - name: Upload matrix test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-matrix-test-results-python-${{ matrix.python-version }}
          path: test-results/