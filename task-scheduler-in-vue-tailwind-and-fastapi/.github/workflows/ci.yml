name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '20'
  POSTGRES_VERSION: '15'

jobs:
  # Quick health checks that run first
  health-checks:
    name: Health Checks
    runs-on: ubuntu-latest
    outputs:
      backend-passed: ${{ steps.backend-status.outcome }}
      frontend-passed: ${{ steps.frontend-status.outcome }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Backend syntax check
        id: backend-status
        run: |
          python -m py_compile backend/**/*.py
          echo "Backend syntax check passed"

      - name: Frontend syntax check
        id: frontend-status
        working-directory: ./client
        run: |
          npm ci
          npm run build || echo "Build failed"
          echo "Frontend syntax check passed"

  # Matrix testing across multiple environments
  matrix-testing:
    name: Matrix Testing (${{ matrix.os }}, Node ${{ matrix.node-version }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: health-checks
    if: needs.health-checks.outputs.backend-passed == 'success' && needs.health-checks.outputs.frontend-passed == 'success'

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20, 22]
        python-version: ['3.9', '3.10', '3.11']
        include:
          - os: ubuntu-latest
            node-version: 20
            python-version: '3.10'
            primary: true
        exclude:
          # Exclude some combinations to reduce CI load
          - os: windows-latest
            node-version: 18
            python-version: '3.9'
          - os: macos-latest
            node-version: 22
            python-version: '3.11'

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: scheduler
          POSTGRES_PASSWORD: scheduler
          POSTGRES_DB: scheduler_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Install Node.js dependencies
        working-directory: ./client
        run: npm ci

      - name: Wait for PostgreSQL
        run: |
          timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U scheduler; do sleep 1; done'
          psql -h localhost -p 5432 -U scheduler -d postgres -c "CREATE DATABASE scheduler_test;" || echo "Database already exists"

      - name: Run backend tests
        env:
          DATABASE_USERNAME: scheduler
          DATABASE_PASSWORD: scheduler
          DATABASE_HOST: localhost
          DATABASE_NAME: scheduler_test
          DATABASE_PORT: 5432
        run: |
          pytest tests/unit/ -v --tb=short --junitxml=test-results/backend-tests-${{ matrix.python-version }}.xml

      - name: Run frontend unit tests
        working-directory: ./client
        run: |
          npm run test:run -- --reporter=json --outputFile=test-results/frontend-tests-${{ matrix.node-version }}.json
          npm run test:run -- --reporter=junit --outputFile=test-results/frontend-tests-${{ matrix.node-version }}.xml

      - name: Build application
        working-directory: ./client
        run: npm run build

      - name: Upload matrix test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: matrix-test-results-${{ matrix.os }}-${{ matrix.node-version }}-${{ matrix.python-version }}
          path: |
            test-results/
            client/test-results/
            client/dist/

  # Full integration tests on primary environment
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: health-checks
    if: needs.health-checks.outputs.backend-passed == 'success' && needs.health-checks.outputs.frontend-passed == 'success'

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: scheduler
          POSTGRES_PASSWORD: scheduler
          POSTGRES_DB: scheduler_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Install Node.js dependencies
        working-directory: ./client
        run: npm ci

      - name: Wait for PostgreSQL
        run: |
          timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U scheduler; do sleep 1; done'
          psql -h localhost -p 5432 -U scheduler -d postgres -c "CREATE DATABASE scheduler_test;"

      - name: Run database migrations
        env:
          DATABASE_USERNAME: scheduler
          DATABASE_PASSWORD: scheduler
          DATABASE_HOST: localhost
          DATABASE_NAME: scheduler_test
          DATABASE_PORT: 5432
        run: |
          alembic upgrade head

      - name: Start backend server
        env:
          DATABASE_USERNAME: scheduler
          DATABASE_PASSWORD: scheduler
          DATABASE_HOST: localhost
          DATABASE_NAME: scheduler_test
          DATABASE_PORT: 5432
        run: |
          uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Run API integration tests
        env:
          DATABASE_USERNAME: scheduler
          DATABASE_PASSWORD: scheduler
          DATABASE_HOST: localhost
          DATABASE_NAME: scheduler_test
          DATABASE_PORT: 5432
        run: |
          pytest tests/integration/ -v \
            --cov=backend \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=test-results/integration-tests.xml

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            test-results/
            htmlcov/
            coverage.xml

  # Performance benchmarks
  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start services
        run: |
          docker compose up -d --build
          sleep 60

      - name: Run performance benchmarks
        run: |
          # Install benchmarking tools
          npm install -g artillery autocannon

          # API performance test
          autocannon -c 10 -d 30 http://localhost:8000/tasks > performance-results/api-benchmark.txt || true

          # Load testing with Artillery
          cat > artillery-config.yml << EOF
          config:
            target: 'http://localhost:8000'
            phases:
              - duration: 60
                arrivalRate: 5
          scenarios:
            - name: "Load test tasks API"
              weight: 100
              flow:
                - get:
                    url: "/tasks"
          EOF

          artillery run artillery-config.yml > performance-results/load-test.txt || true

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-benchmarks
          path: performance-results/

      - name: Cleanup
        if: always()
        run: docker compose down -v

  # Test result aggregation and reporting
  test-reporting:
    name: Test Results Aggregation
    runs-on: ubuntu-latest
    needs: [matrix-testing, integration-tests]
    if: always() && (needs.matrix-testing.result == 'success' || needs.integration-testing.result == 'success')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-test-results/

      - name: Aggregate test results
        run: |
          mkdir -p aggregated-results

          # Find all XML test results
          find all-test-results/ -name "*.xml" -exec cp {} aggregated-results/ \;

          # Generate test summary
          echo "## 🧪 Test Results Summary" > test-summary.md
          echo "" >> test-summary.md

          # Count total tests
          TOTAL_TESTS=$(find aggregated-results/ -name "*.xml" -exec grep -o 'tests="[0-9]*"' {} \; | grep -o '[0-9]*' | awk '{sum+=$1} END {print sum+0}')
          echo "Total tests run: $TOTAL_TESTS" >> test-summary.md

          # Count failures
          TOTAL_FAILURES=$(find aggregated-results/ -name "*.xml" -exec grep -o 'failures="[0-9]*"' {} \; | grep -o '[0-9]*' | awk '{sum+=$1} END {print sum+0}')
          echo "Total failures: $TOTAL_FAILURES" >> test-summary.md

          # Count errors
          TOTAL_ERRORS=$(find aggregated-results/ -name "*.xml" -exec grep -o 'errors="[0-9]*"' {} \; | grep -o '[0-9]*' | awk '{sum+=$1} END {print sum+0}')
          echo "Total errors: $TOTAL_ERRORS" >> test-summary.md

          echo "" >> test-summary.md
          echo "### 📊 Test Matrix Results" >> test-summary.md
          echo "" >> test-summary.md

          # List all result directories
          for dir in all-test-results/*/; do
            if [ -d "$dir" ]; then
              dirname=$(basename "$dir")
              echo "- $dirname" >> test-summary.md
            fi
          done

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Complete Test Results
          path: aggregated-results/*.xml
          reporter: java-junit

      - name: Upload aggregated results
        uses: actions/upload-artifact@v4
        with:
          name: complete-test-results
          path: |
            aggregated-results/
            test-summary.md
            all-test-results/

      - name: Comment PR with test summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            if (fs.existsSync('test-summary.md')) {
              const summary = fs.readFileSync('test-summary.md', 'utf8');

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

  # Build status and deployment readiness
  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [health-checks, matrix-testing, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Check deployment readiness
        run: |
          echo "## 🚀 Deployment Readiness Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if all critical jobs passed
          if [ "${{ needs.health-checks.result }}" == "success" ]; then
            echo "✅ Health checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Health checks failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          if [ "${{ needs.matrix-testing.result }}" == "success" ]; then
            echo "✅ Matrix testing passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Some matrix tests failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.integration-tests.result }}" == "success" ]; then
            echo "✅ Integration tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Integration tests failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Ready for Deployment" >> $GITHUB_STEP_SUMMARY
          echo "All critical checks passed. The application is ready for deployment." >> $GITHUB_STEP_SUMMARY

      - name: Create deployment tag
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const tag = `v${new Date().toISOString().slice(0,10).replace(/-/g,'')}-${context.sha.substring(0,7)}`;

            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tag}`,
              sha: context.sha
            });

            console.log(`Created deployment tag: ${tag}`);