name: E2E Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'client/**'
      - 'backend/**'
      - 'docker compose.yaml'
      - 'client/playwright.config.ts'
      - 'client/tests/e2e/**'
      - '.github/workflows/e2e-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'client/**'
      - 'backend/**'
      - 'docker compose.yaml'
      - 'client/playwright.config.ts'
      - 'client/tests/e2e/**'
      - '.github/workflows/e2e-tests.yml'
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - regression
          - accessibility
          - responsive
      environment:
        description: 'Target environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_BUILDKIT: 1

jobs:
  e2e-tests:
    name: E2E Tests (${{ matrix.browser }})
    timeout-minutes: 30
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        include:
          - browser: chromium
            device: 'Desktop Chrome'
          - browser: firefox
            device: 'Desktop Firefox'
          - browser: webkit
            device: 'Desktop Safari'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: scheduler
          POSTGRES_PASSWORD: scheduler
          POSTGRES_DB: scheduler
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install Playwright dependencies
        working-directory: ./client
        run: |
          npm ci
          npx playwright install --with-deps
          npx playwright install-deps

      - name: Build Docker images
        run: |
          docker compose build --parallel

      - name: Start services with Docker Compose
        run: |
          docker compose up -d --build

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be healthy..."
          timeout 300 bash -c '
            while ! docker compose ps | grep -q "Up (healthy)"; do
              echo "Waiting for services..."
              sleep 10
              docker compose ps
            done
          '

          # Additional health checks
          timeout 60 bash -c '
            until curl -f http://localhost:8000/docs > /dev/null 2>&1; do
              echo "Waiting for backend..."
              sleep 5
            done
          '

          timeout 60 bash -c '
            until curl -f http://localhost:8080 > /dev/null 2>&1; do
              echo "Waiting for frontend..."
              sleep 5
            done
          '

      - name: Verify service status
        run: |
          echo "=== Service Status ==="
          docker compose ps

          echo "=== Backend Health ==="
          curl -f http://localhost:8000/health || echo "Backend health check failed"

          echo "=== Frontend Health ==="
          curl -f http://localhost:8080 || echo "Frontend health check failed"

      - name: Run database migrations
        run: |
          docker compose exec -T backend alembic upgrade head

      - name: Seed test data
        run: |
          docker compose exec -T backend python -c "
          from backend.db import SessionLocal
          from backend.tasks.model import Task
          from datetime import datetime

          db = SessionLocal()
          try:
              # Add sample test data
              test_task = Task(
                  title='E2E Test Task',
                  description='Task for E2E testing',
                  completed=False,
                  due_date=datetime.now()
              )
              db.add(test_task)
              db.commit()
              print('Test data seeded successfully')
          except Exception as e:
              print(f'Error seeding test data: {e}')
          finally:
              db.close()
          " || echo "Test data seeding failed, continuing with tests"

      - name: Run Playwright tests (${{ matrix.browser }})
        working-directory: ./client
        env:
          BASE_URL: http://localhost:8080
          CI: true
          PLAYWRIGHT_BROWSERS_PATH: 0
        run: |
          npx playwright test --project=${{ matrix.browser }} --reporter=json,html,list

      - name: Run accessibility tests
        working-directory: ./client
        if: matrix.browser == 'chromium'
        env:
          BASE_URL: http://localhost:8080
          CI: true
        run: |
          npx playwright test --project=${{ matrix.browser }} --grep="accessibility" --reporter=json,list || true

      - name: Run responsive design tests
        working-directory: ./client
        if: matrix.browser == 'chromium'
        env:
          BASE_URL: http://localhost:8080
          CI: true
        run: |
          npx playwright test --project=${{ matrix.browser }} --grep="responsive" --reporter=json,list || true

      - name: Collect test results
        working-directory: ./client
        if: always()
        run: |
          mkdir -p test-results
          cp -r playwright-report test-results/ || true
          cp -r test-results test-results/e2e-${{ matrix.browser }} || true
          find . -name "*.json" -path "*/test-results/*" -exec cp {} test-results/ \;

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            client/test-results/
            client/playwright-report/
            client/test-results/e2e-${{ matrix.browser }}/

      - name: Upload screenshots and videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-failure-artifacts-${{ matrix.browser }}
          path: |
            client/test-results/
            client/playwright-report/
            **/test-results/**

      - name: Generate E2E test summary
        if: always()
        working-directory: ./client
        run: |
          echo "## E2E Test Results (${{ matrix.browser }})" >> $GITHUB_STEP_SUMMARY

          if [ -f "test-results/results.json" ]; then
            echo '```json' >> $GITHUB_STEP_SUMMARY
            head -50 test-results/results.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "No test results found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Docker logs on failure
        if: failure()
        run: |
          echo "=== Backend logs ==="
          docker compose logs backend
          echo "=== Frontend logs ==="
          docker compose logs frontend
          echo "=== Database logs ==="
          docker compose logs db

      - name: Cleanup Docker containers
        if: always()
        run: |
          docker compose down -v
          docker system prune -f

  e2e-tests-mobile:
    timeout-minutes: 15
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install dependencies
      working-directory: ./client
      run: npm ci

    - name: Install Playwright browsers
      working-directory: ./client
      run: npx playwright install --with-deps chromium

    - name: Start Docker services
      run: |
        docker compose up -d --build
        echo "Waiting for services to be ready..."
        timeout 120 bash -c 'until curl -f http://localhost:8080 && curl -f http://localhost:8000/docs; do sleep 2; done'

    - name: Wait for full application startup
      run: sleep 30

    - name: Run mobile E2E tests
      working-directory: ./client
      env:
        USE_DOCKER: true
        BASE_URL: http://localhost:8080
        CI: true
      run: npx playwright test --project="Mobile Chrome"

    - name: Upload mobile test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report-mobile
        path: client/playwright-report/
        retention-days: 7

    - name: Stop Docker services
      if: always()
      run: docker compose down -v

  smoke-test:
    timeout-minutes: 10
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install dependencies
      working-directory: ./client
      run: npm ci

    - name: Install Playwright browsers
      working-directory: ./client
      run: npx playwright install --with-deps chromium

    - name: Start Docker services
      run: |
        docker compose up -d --build
        echo "Waiting for services to be ready..."
        timeout 120 bash -c 'until curl -f http://localhost:8080 && curl -f http://localhost:8000/docs; do sleep 2; done'

    - name: Wait for full application startup
      run: sleep 30

    - name: Run smoke tests
      working-directory: ./client
      env:
        USE_DOCKER: true
        BASE_URL: http://localhost:8080
        CI: true
      run: npx playwright test tests/e2e/setup.spec.ts --project=chromium

    - name: Stop Docker services
      if: always()
      run: docker compose down -v

  # Visual regression tests
  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        working-directory: ./client
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Start services
        run: |
          docker compose up -d --build
          sleep 60

      - name: Run visual regression tests
        working-directory: ./client
        env:
          BASE_URL: http://localhost:8080
          CI: true
        run: |
          npx playwright test --project=chromium --grep="visual" --reporter=json,html || true

      - name: Upload visual regression results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-regression-results
          path: |
            client/playwright-report/
            client/test-results/

      - name: Cleanup
        if: always()
        run: docker compose down -v

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Start services
        run: |
          docker compose up -d --build
          sleep 60

      - name: Run Lighthouse CI
        run: |
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/

      - name: Cleanup
        if: always()
        run: docker compose down -v