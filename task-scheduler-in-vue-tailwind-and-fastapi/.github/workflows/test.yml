name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run backend unit tests
      run: |
        pytest tests/unit/ -v --tb=short
      env:
        TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

    - name: Run backend integration tests
      run: |
        pytest tests/integration/ -v --tb=short
      env:
        TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

    - name: Generate coverage report
      run: |
        pip install pytest-cov
        pytest --cov=backend --cov-report=xml
      env:
        TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./client
      run: npm ci

    - name: Run frontend unit tests
      working-directory: ./client
      run: npm run test:run

    - name: Generate frontend coverage
      working-directory: ./client
      run: |
        npm install --save-dev @vitest/coverage-v8
        npm run test:coverage

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./client/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install frontend dependencies
      working-directory: ./client
      run: npm ci

    - name: Install Playwright browsers
      working-directory: ./client
      run: npm run test:e2e:install

    - name: Start application
      run: |
        docker compose up -d --build
        sleep 30  # Wait for services to be ready

    - name: Run E2E tests
      working-directory: ./client
      run: npm run test:e2e
      env:
        BASE_URL: http://localhost:8080

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: client/playwright-report/
        retention-days: 30

    - name: Stop application
      if: always()
      run: docker compose down

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r backend/ -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan
        path: bandit-report.json

  lint-and-format:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Python linting tools
      run: |
        pip install flake8 black isort

    - name: Check Python code formatting
      run: |
        black --check backend/
        isort --check-only backend/

    - name: Lint Python code
      run: |
        flake8 backend/ --max-line-length=88 --ignore=E203,W503

    - name: Install frontend dependencies
      working-directory: ./client
      run: npm ci

    - name: Check frontend code formatting
      working-directory: ./client
      run: |
        npm install --save-dev prettier
        npx prettier --check src/